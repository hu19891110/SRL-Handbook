#######
Welcome
#######

This document is the guide for users of our *Online Judge* based services including:

 - `Sphere Engine <http://www.sphere-engine.com?utm_source=handbook>`_
 - `Sphere Contest <http://www.sphere-contest.com?utm_source=handbook>`_
 - `SPOJ <http://www.spoj.com>`_
      
First of all **it is not** comprehensive and exhaustive manual for vast area of technical issues of mentioned services. We focus on the essence of functionality namely the idea of processing source codes submitted into the system. As the user of one of our products you will be the creator of new programming problems. 

Let us introduce the convention of naming - the person who creates the problem is *the problem setter* or *the author* and the person who use the service and solves the problem is just *the user*. All presented information are independent of the type of our service thus we just call it *service*. Also note that the services are rather oriented to deal with console applications with standard input/output communication. 

We provide simple definitions in dictionary, get familiar with them to avoid future problems with understanding.

Dictionary
----------
         
**Problem**
  The challange task for service's users which is the basic element of the service and it contains:
  
  - Description: text explanation of the problem nature along with input/output specification (see more :ref:`Problem description <problem-description>`)
  - Test case: the set of input and output data along with a method of judging (see more :ref:`Test case <test-case>`)
  - Master judge: the method of final scoring the execution of the submitted solution
  
**Problem instance (input instance)**
  The set of data which determines all variables from the problem definition. For example 
  number *10* is an instance for *the prime number* problem (i.e. for a given number *n* 
  determine if *n* is a prime number).
  
**Test case**
  The set of data (usually pair of input file and correct output file) used for verification 
  of the user's submission. It serves as a certificate of the correctness and also contains:
  
  - **time limit** the maximum time of the user's solution execution with the data from input file
  - **tast case judge** a program that analyses the output generated by user's solution 
    (usually compares user's output with correct output) (see more :ref:`Judges <judges-simple>`, 
    :ref:`Writing judges <judges-advanced>`)
  
**Submission** Â­
  The source code which is potentially the correct solution to the problem.
  
**Submission status**
  Short information about the user's submission execution. It can be one of the following: 
  *accepted*, *wrong answer*, *time limit exceeded*, *run time error*, *compile error* 
  (see more :ref:`Statuses <appendix-statuses>`)
  
**User**
  The programmer (developer).
  
**Problem setter** 
  User of the service with the permissions to create and manage problems.
  
**Administrator**
  User of the service with full set of permissions.
